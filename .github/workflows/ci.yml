name: Programmers Quest Primary CI
on:
  workflow_dispatch:
  push:
    branches: [develop, staging, release]
  pull_request:
    
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_PREFIX: programmers-quest
  DOCKERHUB_OWNER: thetestgame
  RELEASE_PYTHON_VERSION: 3.9

jobs:
  # Performs automatic source tests prior to attempting to build the source
  perform-source-tests:
    name: Perform automatic testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.RELEASE_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r quest/docs/requirements.dev.txt
          pip install -r quest/docs/requirements.txt
      - name: Perform tests
        run: |
          python setup.py test

  # Builds the client application
  build-client-executables:
    name: Build Client Executables
    if: github.event_name == 'push' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: perform-source-tests
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.RELEASE_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r quest/docs/requirements.dev.txt
          pip install -r quest/docs/requirements.txt
      - name: Build Executables
        run: |
          python setup.py bdist_apps

  # Creates a new client release on Github
  create-client-release:
    name: Create Release Version
    needs: build-client-executables
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{steps.github_release.outputs.changelog}}
          artifacts: "dist/*.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Builds the Docker server images for Github Packages
  build-and-push-server-packages:
    name: Build Server Image (${{ matrix.name }})
    runs-on: ubuntu-latest
    needs: [build-client-executables]
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        include:
          - name: "astron"
            dockerfile: astron/Dockerfile
          - name: "uberdog"
            dockerfile: quest/uberdog/Dockerfile
          - name: "ai"
            dockerfile: quest/ai/Dockerfile
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: |
            ${{ env.DOCKERHUB_OWNER }}/${{ env.IMAGE_PREFIX }}-${{ matrix.name }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_PREFIX }}-${{ matrix.name }}

      - name: Build and push server Docker image (${{ matrix.name }})
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
  # Syncs the repository README to DockerHub on a succesful release build
  sync-readme-to-dockerhub:
    name: Sync README to DockerHub Repositories (${{ matrix.name }})
    runs-on: ubuntu-latest
    needs: build-and-push-server-packages
    if: github.ref == 'refs/heads/release'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - name: "astron"
          - name: "uberdog"
          - name: "ai"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
    
      - name: Sync Github README
        uses: ms-jpq/sync-dockerhub-readme@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKERHUB_OWNER }}/${{ env.IMAGE_PREFIX }}-${{ matrix.name }}
          readme: "./README.md"
