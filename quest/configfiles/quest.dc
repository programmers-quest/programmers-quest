// Some abstractions for readability.
typedef uint32 doId;
typedef uint32 zoneId;
typedef uint64 channel;

// The Python Views for these distributed classes.
from quest.distributed.objects import QuestDistributedObjectGlobal/AI/UD
from quest.distributed.objects import QuestDistributedObject/AI/UD/UV
from quest.distributed.objects import QuestDistributedNode/AI
from quest.distributed.game import DistributedGame/AI
from quest.distributed.authentication import QuestAccount/AI/UD
from quest.distributed.authentication import QuestLoginManager/AI/UD
from quest.distributed.shard import DistributedShardServer/AI/UD

// Custom quest module wrapper for the Panda3D direct tree
// DistributedObject class.
//
// See Also:
//    "quest/distributed.objects.py"
//      - QuestDistributedObject
//      - QuestDistributedObjectAI
//      - QuestDistributedObjectUD
//      - QuestDistributedObjectOV
dclass QuestDistributedObject : DistributedObject {
};

// Custom quest module wrapper for the Panda3D direct tree
// DistributedObjectGlobal class.
//
// See Also:
//    "quest/distributed.objects.py"
//      - QuestDistributedObjectGlobal
//      - QuestDistributedObjectGlobalAI
//      - QuestDistributedObjectGlobalUD
dclass QuestDistributedObjectGlobal : DistributedObjectGlobal {
};

// Custom quest module wrapper for the Panda3D direct tree
// DistributedNode class.
//
// See Also:
//    "quest/distributed.objects.py"
//      - QuestDistributedNode
//      - QuestDistributedNodeAI
dclass QuestDistributedNode : DistributedNode {
};

// This object has no attributes or methods and is never actually created by the game client. However
// it is required for the distributed objects system to work properly. It serves as the object tree root
// for the entire game inside the Astron server. Everything owned by the game is parented under this object
//
// See Also:
//    "quest/distributed.game.py"
//      - DistributedGame
//      - DistributedGameAI
dclass DistributedGame : QuestDistributedObject {
};

// Stub object to fulfill the requirements of the DC system. This is used internally to bridge the PlayFab account details to the details stored
// within the Astron cluster database.
//
// See Also:
//    "quest/distributed/authentication.py"
//      - QuestAccount
//      - QuestAccountAI
//      - QuestAccountUD
dclass QuestAccount : QuestDistributedObject {
    string playfab_account_id;
};

// Cluster's authentication DOG instance. Handles the authentication and 
// access control of incoming client connections into the Programmer's Quest
// Astron cluster.
// 
// See Also:
//    "quest/distributed/authentication.py"
//      - QuestLoginManager
//      - QuestLoginManagerAI
//      - QuestLoginManagerUD
dclass QuestLoginManager : QuestDistributedObjectGlobal  {
  request_authentication(string token) clsend;
  handle_request_authentication_result(uint32 code, string message) clsend;
};

// Root discovery object for all AI server instances. Replicated across 
// Client, AI, and UberDOG servers
//
// See Also:
//    "quest/distributed/shard.py"
//      - DistributedShardServer
//      - DistributedShardServerAI
//      - DistributedShardServerUD
dclass DistributedShardServer: QuestDistributedObject {
  set_name(string name="Undefined") required broadcast ram;
  set_available(uint8 = 0) required broadcast ram;
};